{"version":3,"sources":["teamSelectDropdown.js","teamPanel.js","charts/lineComparisonChart.js","charts/hitComparisonChart.js","charts/takeawayComparisonChart.js","utils/colorUtil.js","utils/apiUtil.js","App.js","serviceWorker.js","index.js"],"names":["TeamSelectDropdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","setState","dropdownOpen","state","getDropdownTitle","selectedTeam","label","teams","name","value","generateOptions","keys","map","teamKey","_this2","react_default","a","createElement","react_select_esm","className","onChange","_ref","selectTeam","panel","options","Component","TeamPanel","getTeamTitle","renderTeamRecord","_this$props","teamStats","colors","recordValue","wins","stats","stat","losses","otLosses","ot","gamesPlayed","es","innerRadius","radius","colorType","onValueMouseOver","v","onSeriesMouseOut","data","angle","color","primaryColor","secondaryColor","tertiaryColor","width","height","renderTeamPoints","_this$props2","concat","pts","getRankingsData","push","x","parseInt","rankings","goalsPerGame","y","goalsAgainstPerGame","powerPlayPercentage","penaltyKillPercentage","faceOffWinPercentage","renderRankingsChart","_this$props3","yType","margin","left","xDomain","renderTeamStats","_this$props4","style","justifyContent","teamSelectDropdown","ShotComparisonChart","formatShotsData","teamPanel1Data","teamPanel2Data","dataTeamOne","lastFive","game","index","shots","dataTeamTwo","shotsComparison","_this$formatShotsData","maxShots","toConsumableArray","reduce","teamOneColor","teamTwoColor","yDomain","strokeWidth","lineStyle","stroke","markStyle","fill","HitComparisonChart","hits","hitsComparison","TakeawayComparisonChart","takeaways","maxValue","getTeamColors","fourthColor","thirdColor","axios","require","fetchPreviousFiveGames","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","teamId","endDate","startDate","previousGamesUrl","schedule","lastFiveGameIds","gameDataPromises","lastFiveGames","wrap","_context2","prev","next","moment","subtract","format","get","sent","dates","slice","games","gamePk","gameId","Promise","all","abrupt","gameData","away","team","id","teamSkaterStats","home","stop","_x2","apply","arguments","App","_callee","panelNumber","response","_context","splits","defineProperty","t0","_x","_this$state","marginBottom","backgroundImage","backgroundSize","teamPanel","lineComparisonChart","hitComparisonChart","takeawayComparisonChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"umHAmCeA,cA7Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,eAAiB,kBAAMP,EAAKQ,SAAS,CAAEC,cAAeT,EAAKU,MAAMD,gBAR9CT,EAUnBW,iBAAmB,kBAAMX,EAAKD,MAAMa,cACjC,CAAEC,MAAOC,EAAMd,EAAKD,MAAMa,cAAcG,KAAMC,MAAOhB,EAAKD,MAAMa,eAXhDZ,EAanBiB,gBAAkB,kBAAMhB,OAAOiB,KAAKJ,GAAOK,IAAI,SAAAC,GAAO,MAAK,CACzDP,MAAOC,EAAMM,GAASL,KACtBC,MAAOI,MAZPpB,EAAKU,MAAQ,CACXD,cAAc,GAJCT,wEAkBV,IAAAqB,EAAAlB,KACP,OACEmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAU,uBACVV,MAAQb,KAAKQ,mBACbgB,SAAW,SAAAC,GAAA,IAAGZ,EAAHY,EAAGZ,MAAH,OAAeK,EAAKtB,MAAM8B,WAAWb,EAAOK,EAAKtB,MAAM+B,QAClEC,QAAU5B,KAAKc,2BAzBUe,aC6JlBC,cAhJb,SAAAA,EAAYlC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACjBjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KAORmC,aAAe,kBAAMlC,EAAKD,MAAMa,aAC9BE,EAAMd,EAAKD,MAAMa,cAAcG,KAAO,iBATrBf,EAWnBmC,iBAAmB,WAAM,IAAAC,EACqBpC,EAAKD,MAAzCa,EADewB,EACfxB,aAAcyB,EADCD,EACDC,UAAWC,EADVF,EACUE,OACzBC,EAAgBvC,EAAKU,MAArB6B,YAMR,GAJIA,IADc,GAENA,EAAY1B,MAAME,MAAQwB,EAAY1B,MAAMG,QAGnDJ,IAAiByB,EACpB,OAAOf,EAAAC,EAAAC,cAAA,YAET,IAAMgB,EAAOH,EAAUI,MAAMC,KAAKF,KAC5BG,EAASN,EAAUI,MAAMC,KAAKC,OAC9BC,EAAWP,EAAUI,MAAMC,KAAKG,GAChCC,EAAcT,EAAUI,MAAMC,KAAKI,YACzC,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBAAyBc,EAAxC,IAAiDG,EAAjD,IAA4DC,GAC5DtB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEC,YAAc,GACdC,OAAS,GACTC,UAAU,UACVC,iBAAkB,SAAAC,GAAC,OAAIpD,EAAKQ,SAAS,CAAE+B,YAAaa,KACpDC,iBAAkB,SAAAD,GAAC,OAAIpD,EAAKQ,SAAS,CAAE+B,aAAa,KACpDe,KAAM,CACJ,CAAEC,MAAOf,EAAOM,EAAc,IAAKU,MAAOlB,EAAOmB,aAAc5C,MAAO2B,GACtE,CAAEe,MAAOZ,EAASG,EAAc,IAAKU,MAAOlB,EAAOoB,eAAgB7C,MAAO8B,GAC1E,CAAEY,MAAOX,EAAWE,EAAc,IAAKU,MAAOlB,EAAOqB,cAAe9C,MAAO+B,IAE7EgB,MAAQ,IACRC,OAAS,KACPtB,GAAejB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAM/B,MAAQuB,OA1CpBvC,EAgDnB8D,iBAAmB,WAAM,IAAAC,EACa/D,EAAKD,MAAjCa,EADemD,EACfnD,aAAcyB,EADC0B,EACD1B,UACtB,OAAKzB,GAAiByB,EAIff,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAf,GAAAsC,OAAiC3B,EAAUI,MAAMC,KAAKuB,IAAtD,SAHE,IAnDQjE,EAyDnBkE,gBAAkB,SAAC7B,GACjB,IAAMiB,EAAO,GAOb,OANAA,EAAKa,KAAK,CAAEC,EAAG,GAAKC,SAAShC,EAAUiC,SAAS5B,KAAK6B,cAAeC,EAAG,cACvElB,EAAKa,KAAK,CAAEC,EAAG,GAAKC,SAAShC,EAAUiC,SAAS5B,KAAK+B,qBAAsBD,EAAG,kBAC9ElB,EAAKa,KAAK,CAAEC,EAAG,GAAKC,SAAShC,EAAUiC,SAAS5B,KAAKgC,qBAAsBF,EAAG,eAC9ElB,EAAKa,KAAK,CAAEC,EAAG,GAAKC,SAAShC,EAAUiC,SAAS5B,KAAKiC,uBAAwBH,EAAG,iBAChFlB,EAAKa,KAAK,CAAEC,EAAG,GAAKC,SAAShC,EAAUiC,SAAS5B,KAAKkC,sBAAuBJ,EAAG,eAExElB,GAjEUtD,EAoEnB6E,oBAAsB,WAAM,IAAAC,EACkB9E,EAAKD,MAAzCa,EADkBkE,EAClBlE,aAAcyB,EADIyC,EACJzC,UAAWC,EADPwC,EACOxC,OACjC,OAAK1B,GAAiByB,EAKpBf,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEgC,MAAM,UACNC,OAAQ,CAAEC,KAAM,KAChBrB,MAAQ,IACRC,OAAS,IACTqB,QAAU,CAAC,EAAG,IACd1B,MAAQlB,EAAOmB,cACfnC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEO,KAAOtD,EAAKkE,gBAAgB7B,MAfzB,IAvEQrC,EA2FnBmF,gBAAkB,WAGhB,OAFyBnF,EAAKD,MAAtBa,aASNU,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mCACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAcJ,EAAAC,EAAAC,cAAA,qBAC7BF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACX1B,EAAK8D,qBAGXxC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAcJ,EAAAC,EAAAC,cAAA,qBAC7BF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACX1B,EAAKmC,sBAIbb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACXJ,EAAAC,EAAAC,cAAA,sBACExB,EAAK6E,wBAtBbvD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,0BAAf,MA7FF1B,EAAKU,MAAQ,CACX6B,aAAa,GAJEvC,wEA4HV,IAAAoF,EACqCjF,KAAKJ,MAAzC+B,EADDsD,EACCtD,MAAOD,EADRuD,EACQvD,WAAYjB,EADpBwE,EACoBxE,aAC3B,OACEU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACb2D,MAAO,CAAEC,eAA0B,IAAVxD,EAAc,WAAa,eACpDR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,0BACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,UAAMrB,KAAK+B,gBACXZ,EAAAC,EAAAC,cAAC+D,EAAD,CACIzD,MAAQA,EACRlB,aAAeA,EACfiB,WAAaA,KAEjB1B,KAAKgF,2BA3IOnD,qBCmETwD,6MArEbC,gBAAkB,WAAM,IAAArD,EACqBpC,EAAKD,MAAxC2F,EADctD,EACdsD,eAAgBC,EADFvD,EACEuD,eACxB,OAAKD,EAAe9E,cAAiB+E,EAAe/E,aAc7C,CAAEgF,YAVWF,EAAeG,SAAS1E,IAAI,SAAC2E,EAAMC,GAAP,MAAkB,CAChE3B,EAAG2B,EAAQ,EACXvB,EAAGsB,EAAKE,SAQYC,YALFN,EAAeE,SAAS1E,IAAI,SAAC2E,EAAMC,GAAP,MAAkB,CAChE3B,EAAG2B,EAAQ,EACXvB,EAAGsB,EAAKE,UAVD,CAAEJ,YAAa,GAAIK,YAAa,OAgB3CC,gBAAkB,WAAM,IAAAnC,EACqB/D,EAAKD,MAAxC2F,EADc3B,EACd2B,eAAgBC,EADF5B,EACE4B,eADFQ,EAEenG,EAAKyF,kBAAlCG,EAFcO,EAEdP,YAAaK,EAFCE,EAEDF,YACfG,EAAW,GAAApC,OAAA/D,OAAAoG,EAAA,EAAApG,CAAI2F,GAAJ3F,OAAAoG,EAAA,EAAApG,CAAoBgG,IAAaK,OAAO,SAACF,EAAUN,GAAX,OACvDA,EAAKtB,EAAI4B,EAAWN,EAAKtB,EAAI4B,GAAU,GAGzC,IAAKV,EAAe9E,eAAiB+E,EAAe/E,aAClD,OAAOU,EAAAC,EAAAC,cAAA,sBAGT,IAAM+E,EAAeb,EAAepD,OAAOmB,aACrC+C,EAAeb,EAAerD,OAAOmB,aAE3C,OACEnC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACE0D,QAAU,CAAC,EAAGL,EAAW,GACzBxC,MAAO,IAAKC,OAAQ,KACpBvC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACErB,UAAU,0BACV2D,MAAO,CAAEqB,YAAa,OACtBC,UAAW,CAAEC,OAAQL,GACrBM,UAAW,CAAED,OAAQL,EAAcO,KAAMP,GACzCjD,KAAOsC,IAETtE,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACErB,UAAU,0BACV2D,MAAO,CAAEqB,YAAa,OACtBC,UAAW,CAAEC,OAAQJ,GACrBK,UAAW,CAAED,OAAQJ,EAAcM,KAAMN,GACzClD,KAAO2C,8EAOb,OACE3E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACXJ,EAAAC,EAAAC,cAAA,mBACErB,KAAK+F,0BAjEiBlE,aCqEnB+E,6MAnEbtB,gBAAkB,WAAM,IAAArD,EACqBpC,EAAKD,MAAxC2F,EADctD,EACdsD,eAAgBC,EADFvD,EACEuD,eACxB,OAAKD,EAAe9E,cAAiB+E,EAAe/E,aAc7C,CAAEgF,YAVWF,EAAeG,SAAS1E,IAAI,SAAC2E,EAAMC,GAAP,MAAkB,CAChE3B,EAAG2B,EAAQ,EACXvB,EAAGsB,EAAKkB,QAQYf,YALFN,EAAeE,SAAS1E,IAAI,SAAC2E,EAAMC,GAAP,MAAkB,CAChE3B,EAAG2B,EAAQ,EACXvB,EAAGsB,EAAKkB,SAVD,CAAEpB,YAAa,GAAIK,YAAa,OAgB3CgB,eAAiB,WAAM,IAAAlD,EACsB/D,EAAKD,MAAxC2F,EADa3B,EACb2B,eAAgBC,EADH5B,EACG4B,eADHQ,EAEgBnG,EAAKyF,kBAAlCG,EAFaO,EAEbP,YAAaK,EAFAE,EAEAF,YACfG,EAAW,GAAApC,OAAA/D,OAAAoG,EAAA,EAAApG,CAAI2F,GAAJ3F,OAAAoG,EAAA,EAAApG,CAAoBgG,IAAaK,OAAO,SAACF,EAAUN,GAAX,OACvDA,EAAKtB,EAAI4B,EAAWN,EAAKtB,EAAI4B,GAAU,GAGzC,IAAKV,EAAe9E,eAAiB+E,EAAe/E,aAClD,OAAOU,EAAAC,EAAAC,cAAA,sBAET,IAAM+E,EAAeb,EAAepD,OAAOmB,aACrC+C,EAAeb,EAAerD,OAAOmB,aAC3C,OACEnC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACE0D,QAAU,CAAC,EAAGL,EAAW,GACzBxC,MAAO,IAAKC,OAAQ,KACpBvC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACErB,UAAU,0BACV2D,MAAO,CAAEqB,YAAa,OACtBC,UAAW,CAAEC,OAAQL,GACrBM,UAAW,CAAED,OAAQL,EAAcO,KAAMP,GACzCjD,KAAOsC,IAETtE,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACErB,UAAU,0BACV2D,MAAO,CAAEqB,YAAa,OACtBC,UAAW,CAAEC,OAAQJ,GACrBK,UAAW,CAAED,OAAQJ,EAAcM,KAAMN,GACzClD,KAAO2C,8EAOb,OACE3E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACXJ,EAAAC,EAAAC,cAAA,kBACErB,KAAK8G,yBA/DgBjF,aCuElBkF,6MArEbzB,gBAAkB,WAAM,IAAArD,EACqBpC,EAAKD,MAAxC2F,EADctD,EACdsD,eAAgBC,EADFvD,EACEuD,eACxB,OAAKD,EAAe9E,cAAiB+E,EAAe/E,aAc7C,CAAEgF,YAVWF,EAAeG,SAAS1E,IAAI,SAAC2E,EAAMC,GAAP,MAAkB,CAChE3B,EAAG2B,EAAQ,EACXvB,EAAGsB,EAAKqB,aAQYlB,YALFN,EAAeE,SAAS1E,IAAI,SAAC2E,EAAMC,GAAP,MAAkB,CAChE3B,EAAG2B,EAAQ,EACXvB,EAAGsB,EAAKqB,cAVD,CAAEvB,YAAa,GAAIK,YAAa,OAgB3CC,gBAAkB,WAAM,IAAAnC,EACqB/D,EAAKD,MAAxC2F,EADc3B,EACd2B,eAAgBC,EADF5B,EACE4B,eADFQ,EAEenG,EAAKyF,kBAAlCG,EAFcO,EAEdP,YAAaK,EAFCE,EAEDF,YACfmB,EAAW,GAAApD,OAAA/D,OAAAoG,EAAA,EAAApG,CAAI2F,GAAJ3F,OAAAoG,EAAA,EAAApG,CAAoBgG,IAAaK,OAAO,SAACc,EAAUtB,GAAX,OACvDA,EAAKtB,EAAI4C,EAAWtB,EAAKtB,EAAI4C,GAAU,GAGzC,IAAK1B,EAAe9E,eAAiB+E,EAAe/E,aAClD,OAAOU,EAAAC,EAAAC,cAAA,sBAGT,IAAM+E,EAAeb,EAAepD,OAAOmB,aACrC+C,EAAeb,EAAerD,OAAOmB,aAE3C,OACEnC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACE0D,QAAU,CAAC,EAAGW,EAAW,GACzBxD,MAAO,IAAKC,OAAQ,KACpBvC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,MACAzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACErB,UAAU,0BACV2D,MAAO,CAAEqB,YAAa,OACtBC,UAAW,CAAEC,OAAQL,GACrBM,UAAW,CAAED,OAAQL,EAAcO,KAAMP,GACzCjD,KAAOsC,IAETtE,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACErB,UAAU,0BACV2D,MAAO,CAAEqB,YAAa,OACtBC,UAAW,CAAEC,OAAQJ,GACrBK,UAAW,CAAED,OAAQJ,EAAcM,KAAMN,GACzClD,KAAO2C,8EAOb,OACE3E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACXJ,EAAAC,EAAAC,cAAA,uBACErB,KAAK+F,0BAjEqBlE,aCVzBqF,EAAgB,SAACjG,GAC5B,IAAMkB,EAAS,CACbmB,aAAc,OACdC,eAAgB,OAChBC,cAAe,OACf2D,YAAa,QASf,OANIlG,IACFkB,EAAOmB,aAAe3C,EAAMM,GAASqC,aACrCnB,EAAOoB,eAAiB5C,EAAMM,GAASsC,gBAAkB,OACzDpB,EAAOqB,cAAgB7C,EAAMM,GAASmG,YAAc,QAG/CjF,oBCfHkF,EAAQC,EAAQ,IAOTC,EAAsB,eAAAC,EAAA1H,OAAA2H,EAAA,EAAA3H,CAAA4H,EAAAtG,EAAAuG,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAV,EAAAtG,EAAAiH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC9BV,EAAUW,MAASC,SAAS,EAAG,QAAQC,OAAO,cAC9CZ,EAAYU,MAASC,SAAS,EAAG,UAAUC,OAAO,cAClDX,EAH8B,uDAAAnE,OAG4CgE,EAH5C,eAAAhE,OAGgEkE,EAHhE,aAAAlE,OAGqFiE,GAHrFQ,EAAAE,KAAA,EAIZnB,EAAMuB,IAAIZ,GAJE,cAI9BC,EAJ8BK,EAAAO,KAK9BX,EAAkBD,EAAS9E,KAAK2F,MAAMC,OAAO,GAAG/H,IAAI,SAAA2E,GAAI,OAAIA,EAAKqD,MAAM,GAAGC,SAC1Ed,EAAmBD,EAAgBlH,IAAI,SAAAkI,GAAM,OAAI7B,EAAMuB,IAAN,4CAAA/E,OAAsDqF,EAAtD,gBANnBZ,EAAAE,KAAA,GAORW,QAAQC,IAAIjB,GAPJ,eAO9BC,EAP8BE,EAAAO,KAAAP,EAAAe,OAAA,SAQ7BjB,EAAcpH,IAAI,SAAAsI,GACvB,IAAM3I,EAAQ2I,EAASnG,KAAKxC,MAC5B,OAAIA,EAAM4I,KAAKC,KAAKC,KAAO5B,EAClBlH,EAAM4I,KAAKrH,UAAUwH,gBAEvB/I,EAAMgJ,KAAKzH,UAAUwH,mBAbM,yBAAApB,EAAAsB,SAAAhC,MAAH,gBAAAiC,GAAA,OAAArC,EAAAsC,MAAA9J,KAAA+J,YAAA,GCE7B1C,EAAQC,EAAQ,IAkGP0C,cA/Fb,SAAAA,EAAYpK,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgK,IACjBnK,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkK,GAAA7J,KAAAH,KAAMJ,KAQR8B,WATmB,eAAAD,EAAA3B,OAAA2H,EAAA,EAAA3H,CAAA4H,EAAAtG,EAAAuG,KASN,SAAAsC,EAAOhJ,EAASiJ,GAAhB,IAAArC,EAAAsC,EAAA7H,EAAAoD,EAAA,OAAAgC,EAAAtG,EAAAiH,KAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA7B,KAAA,EAEHV,EAASlH,EAAMM,GAASwI,GAFrBW,EAAA5B,KAAA,EAGcnB,EAAMuB,IAAN,6CAAA/E,OAAuDgE,EAAvD,uBAHd,cAGHsC,EAHGC,EAAAvB,KAIHvG,EAAQ6H,EAAShH,KAAKxC,MAAM,GAAGuB,UAAU,GAAGmI,OAJzCD,EAAA5B,KAAA,EAKcjB,EAAuBM,GALrC,OAKHnC,EALG0E,EAAAvB,KAMThJ,EAAKQ,SAALP,OAAAwK,EAAA,EAAAxK,CAAA,eAAA+D,OACeqG,EADf,QACmC,CAC/BzJ,aAAcQ,EACdkB,OAAQ+E,EAAcjG,GACtBiB,UAAW,CACTI,MAAOA,EAAM,GACb6B,SAAU7B,EAAM,IAElBoD,cAdK0E,EAAA5B,KAAA,iBAAA4B,EAAA7B,KAAA,GAAA6B,EAAAG,GAAAH,EAAA,SAkBTvK,EAAKQ,SAALP,OAAAwK,EAAA,EAAAxK,CAAA,eAAA+D,OACeqG,EADf,QACmC,CAC/BzJ,aAAc,KACd0B,OAAQ,GACRD,UAAW,KACXwD,SAAU,MAvBL,yBAAA0E,EAAAR,SAAAK,EAAA,kBATM,gBAAAO,EAAAX,GAAA,OAAApI,EAAAqI,MAAA9J,KAAA+J,YAAA,GAGjBlK,EAAKU,MAAQ,CACXgF,eAAgB,GAChBC,eAAgB,IALD3F,wEAsCV,IAAA4K,EACoCzK,KAAKO,MAAxCgF,EADDkF,EACClF,eAAgBC,EADjBiF,EACiBjF,eAGxB,OACErE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MAAK2D,MAAO,CACzBwF,aAAc,EACdC,gBAAe,OAAA9G,OANO,gEAMP,KACf+G,eAAgB,YAEZrF,EAAe9E,cAAgB+E,EAAe/E,eAChDU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,4BACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,6FAINF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACwJ,EAAD,CACElJ,MAAQ,EACRD,WAAa1B,KAAK0B,WAClBjB,aAAe8E,EAAe9E,aAC9B0B,OAASoD,EAAepD,OACxBuD,SAAWH,EAAeG,SAC1BxD,UAAYqD,EAAerD,YAC7Bf,EAAAC,EAAAC,cAACwJ,EAAD,CACElJ,MAAQ,EACRD,WAAa1B,KAAK0B,WAClBjB,aAAe+E,EAAe/E,aAC9B0B,OAASqD,EAAerD,OACxBuD,SAAWF,EAAeE,SAC1BxD,UAAYsD,EAAetD,gBAE1BqD,EAAe9E,eAAgB+E,EAAe/E,eACjDU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+BACbJ,EAAAC,EAAAC,cAACyJ,EAAD,CACEvF,eAAiBA,EACjBC,eAAiBA,IACnBrE,EAAAC,EAAAC,cAAC0J,EAAD,CACExF,eAAiBA,EACjBC,eAAiBA,IACnBrE,EAAAC,EAAAC,cAAC2J,EAAD,CACEzF,eAAiBA,EACjBC,eAAiBA,MAIzBrE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BAAf,mGACkGJ,EAAAC,EAAAC,cAAA,4BADlG,yBAxFUQ,aCAEoJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAOpK,EAAAC,EAAAC,cAACmK,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.db395f96.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport teams from './constants/teams'\nimport Select from 'react-select'\n\nclass TeamSelectDropdown extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      dropdownOpen: false\n    }\n  }\n\n  toggleDropdown = () => this.setState({ dropdownOpen: !this.state.dropdownOpen })\n\n  getDropdownTitle = () => this.props.selectedTeam && \n    ({ label: teams[this.props.selectedTeam].name, value: this.props.selectedTeam })\n\n  generateOptions = () => Object.keys(teams).map(teamKey => ({\n    label: teams[teamKey].name,\n    value: teamKey\n  }))\n\n  render() {\n    return (\n      <Select\n        className='team-select-dropdown'\n        value={ this.getDropdownTitle() }\n        onChange={ ({ value }) => this.props.selectTeam(value, this.props.panel) }\n        options={ this.generateOptions() } />\n    )\n  }\n}\n\nexport default TeamSelectDropdown","import React, { Component } from 'react';\nimport './App.css';\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  HorizontalBarSeries,\n  RadialChart,\n  Hint\n} from 'react-vis'\nimport teams from './constants/teams'\nimport TeamSelectDropdown from './teamSelectDropdown'\n\n\nclass TeamPanel extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      recordValue: false\n    }\n  }\n\n  getTeamTitle = () => this.props.selectedTeam ?\n    teams[this.props.selectedTeam].name : 'Select a team'\n\n  renderTeamRecord = () => {\n    const { selectedTeam, teamStats, colors } = this.props\n    const { recordValue } = this.state\n    const hintValue = {}\n    if (recordValue) {\n      hintValue[recordValue.label.name] = recordValue.label.value\n    }\n\n    if (!selectedTeam || !teamStats) {\n      return <div></div>\n    }\n    const wins = teamStats.stats.stat.wins\n    const losses = teamStats.stats.stat.losses\n    const otLosses = teamStats.stats.stat.ot\n    const gamesPlayed = teamStats.stats.stat.gamesPlayed\n    return (\n      <div>\n        <div className='record-text-in-chart'>{ wins }-{ losses }-{ otLosses }</div>\n        <RadialChart\n          innerRadius={ 65 }\n          radius={ 95 }\n          colorType=\"literal\"\n          onValueMouseOver={v => this.setState({ recordValue: v })}\n          onSeriesMouseOut={v => this.setState({ recordValue: false })}\n          data={[\n            { angle: wins / gamesPlayed * 360, color: colors.primaryColor, label: wins },\n            { angle: losses / gamesPlayed * 360, color: colors.secondaryColor, label: losses },\n            { angle: otLosses / gamesPlayed * 360, color: colors.tertiaryColor, label: otLosses }\n          ]}\n          width={ 200 }\n          height={ 200 }>\n          { recordValue && <Hint value={ recordValue } />}\n          </RadialChart>\n      </div>\n    )\n  }\n\n  renderTeamPoints = () => {\n    const { selectedTeam, teamStats } = this.props\n    if (!selectedTeam || !teamStats) {\n      return ''\n    }\n\n    return <div className='points-text'>{`${teamStats.stats.stat.pts} pts`}</div>\n  }\n\n  getRankingsData = (teamStats) => {\n    const data = []\n    data.push({ x: 31 - parseInt(teamStats.rankings.stat.goalsPerGame), y: 'Goals For'})\n    data.push({ x: 31 - parseInt(teamStats.rankings.stat.goalsAgainstPerGame), y: 'Goals Against'})\n    data.push({ x: 31 - parseInt(teamStats.rankings.stat.powerPlayPercentage), y: 'Power Play'})\n    data.push({ x: 31 - parseInt(teamStats.rankings.stat.penaltyKillPercentage), y: 'Penalty Kill'})\n    data.push({ x: 31 - parseInt(teamStats.rankings.stat.faceOffWinPercentage), y: 'Face Off %'})\n\n    return data\n  }\n\n  renderRankingsChart = () => {\n    const { selectedTeam, teamStats, colors } = this.props\n    if (!selectedTeam || !teamStats) {\n      return ''\n    }\n\n    return (\n      <XYPlot\n        yType=\"ordinal\"\n        margin={{ left: 100 }}\n        width={ 550 }\n        height={ 250 }\n        xDomain={ [0, 32] }\n        color={ colors.primaryColor }>\n        <HorizontalGridLines />\n        <XAxis />\n        <YAxis />\n        <HorizontalBarSeries\n          data={ this.getRankingsData(teamStats) }/>\n      </XYPlot>\n    )\n  }\n\n  renderTeamStats = () => {\n    const { selectedTeam } = this.props\n\n    if (!selectedTeam) {\n      return (\n      <div className='no-team-selected-panel'>.</div>\n      )\n    }\n\n    return (\n      <div>\n        <div className='stat-container split-view-stats'>\n          <div className='split-view-stat'>\n            <div className='stat-header'><h5>Points</h5></div>\n            <div className='record-text'>\n              { this.renderTeamPoints() }\n            </div>\n          </div>\n          <div className='split-view-stat'>\n            <div className='stat-header'><h5>Record</h5></div>\n            <div className='record-text'>\n              { this.renderTeamRecord() }\n            </div>\n          </div>\n        </div>\n        <div className='stat-container'>\n            <h5>Rankings</h5>\n            { this.renderRankingsChart() }\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    const { panel, selectTeam, selectedTeam } = this.props\n    return (\n      <div className='team-container'\n        style={{ justifyContent: panel === 1 ? 'flex-end' : 'flex-start' }}>\n        <div className='team-content-container'>\n          <div className='team-header'>\n            <h3>{ this.getTeamTitle() }</h3>\n            <TeamSelectDropdown\n                panel={ panel }\n                selectedTeam={ selectedTeam }\n                selectTeam={ selectTeam } />\n          </div>\n          { this.renderTeamStats() }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TeamPanel","import React, { Component } from 'react';\nimport '../App.css';\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineMarkSeries\n} from 'react-vis'\n\nclass ShotComparisonChart extends Component {\n\n  formatShotsData = () => {\n    const { teamPanel1Data, teamPanel2Data } = this.props\n    if (!teamPanel1Data.selectedTeam || !teamPanel2Data.selectedTeam ) {\n      return { dataTeamOne: [], dataTeamTwo: [] }\n    }\n\n    const dataTeamOne = teamPanel1Data.lastFive.map((game, index) => ({\n      x: index + 1,\n      y: game.shots\n    }))\n\n    const dataTeamTwo = teamPanel2Data.lastFive.map((game, index) => ({\n      x: index + 1,\n      y: game.shots\n    }))\n\n    return { dataTeamOne, dataTeamTwo }\n  }\n\n  shotsComparison = () => {\n    const { teamPanel1Data, teamPanel2Data } = this.props\n    const { dataTeamOne, dataTeamTwo } = this.formatShotsData()\n    const maxShots = [...dataTeamOne, ...dataTeamTwo].reduce((maxShots, game) =>\n      game.y > maxShots ? game.y : maxShots, 0)\n\n\n    if (!teamPanel1Data.selectedTeam || !teamPanel2Data.selectedTeam ) {\n      return <div>No data</div>\n    }\n    \n    const teamOneColor = teamPanel1Data.colors.primaryColor\n    const teamTwoColor = teamPanel2Data.colors.primaryColor\n    \n    return (\n      <XYPlot\n        yDomain={ [0, maxShots + 5] }\n        width={400} height={300}>\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis />\n        <YAxis />\n        <LineMarkSeries\n          className=\"linemark-series-example\" \n          style={{ strokeWidth: '3px' }}\n          lineStyle={{ stroke: teamOneColor }}\n          markStyle={{ stroke: teamOneColor, fill: teamOneColor }}\n          data={ dataTeamOne }\n        />\n        <LineMarkSeries\n          className=\"linemark-series-example\" \n          style={{ strokeWidth: '3px' }}\n          lineStyle={{ stroke: teamTwoColor }}\n          markStyle={{ stroke: teamTwoColor, fill: teamTwoColor }}\n          data={ dataTeamTwo }\n        />\n      </XYPlot>\n    )\n  }\n  \n  render() {\n    return (\n      <div className='comparison-stat-container'>\n          <h5>Shots</h5>\n          { this.shotsComparison() }\n      </div>\n    )\n  }\n}\n\nexport default ShotComparisonChart","import React, { Component } from 'react';\nimport '../App.css';\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineMarkSeries\n} from 'react-vis'\n\nclass HitComparisonChart extends Component {\n\n  formatShotsData = () => {\n    const { teamPanel1Data, teamPanel2Data } = this.props\n    if (!teamPanel1Data.selectedTeam || !teamPanel2Data.selectedTeam ) {\n      return { dataTeamOne: [], dataTeamTwo: [] }\n    }\n\n    const dataTeamOne = teamPanel1Data.lastFive.map((game, index) => ({\n      x: index + 1,\n      y: game.hits\n    }))\n\n    const dataTeamTwo = teamPanel2Data.lastFive.map((game, index) => ({\n      x: index + 1,\n      y: game.hits\n    }))\n\n    return { dataTeamOne, dataTeamTwo }\n  }\n\n  hitsComparison = () => {\n    const { teamPanel1Data, teamPanel2Data } = this.props\n    const { dataTeamOne, dataTeamTwo } = this.formatShotsData()\n    const maxShots = [...dataTeamOne, ...dataTeamTwo].reduce((maxShots, game) =>\n      game.y > maxShots ? game.y : maxShots, 0)\n\n\n    if (!teamPanel1Data.selectedTeam || !teamPanel2Data.selectedTeam ) {\n      return <div>No data</div>\n    }\n    const teamOneColor = teamPanel1Data.colors.primaryColor\n    const teamTwoColor = teamPanel2Data.colors.primaryColor\n    return (\n      <XYPlot\n        yDomain={ [0, maxShots + 5] }\n        width={400} height={300}>\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis />\n        <YAxis />\n        <LineMarkSeries\n          className=\"linemark-series-example\" \n          style={{ strokeWidth: '3px' }}\n          lineStyle={{ stroke: teamOneColor }}\n          markStyle={{ stroke: teamOneColor, fill: teamOneColor }}\n          data={ dataTeamOne }\n        />\n        <LineMarkSeries\n          className=\"linemark-series-example\" \n          style={{ strokeWidth: '3px' }}\n          lineStyle={{ stroke: teamTwoColor }}\n          markStyle={{ stroke: teamTwoColor, fill: teamTwoColor }}\n          data={ dataTeamTwo }\n        />\n      </XYPlot>\n    )\n  }\n  \n  render() {\n    return (\n      <div className='comparison-stat-container'>\n          <h5>Hits</h5>\n          { this.hitsComparison() }\n      </div>\n    )\n  }\n}\n\nexport default HitComparisonChart","import React, { Component } from 'react';\nimport '../App.css';\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineMarkSeries\n} from 'react-vis'\n\nclass TakeawayComparisonChart extends Component {\n\n  formatShotsData = () => {\n    const { teamPanel1Data, teamPanel2Data } = this.props\n    if (!teamPanel1Data.selectedTeam || !teamPanel2Data.selectedTeam ) {\n      return { dataTeamOne: [], dataTeamTwo: [] }\n    }\n\n    const dataTeamOne = teamPanel1Data.lastFive.map((game, index) => ({\n      x: index + 1,\n      y: game.takeaways\n    }))\n\n    const dataTeamTwo = teamPanel2Data.lastFive.map((game, index) => ({\n      x: index + 1,\n      y: game.takeaways\n    }))\n\n    return { dataTeamOne, dataTeamTwo }\n  }\n\n  shotsComparison = () => {\n    const { teamPanel1Data, teamPanel2Data } = this.props\n    const { dataTeamOne, dataTeamTwo } = this.formatShotsData()\n    const maxValue = [...dataTeamOne, ...dataTeamTwo].reduce((maxValue, game) =>\n      game.y > maxValue ? game.y : maxValue, 0)\n\n\n    if (!teamPanel1Data.selectedTeam || !teamPanel2Data.selectedTeam ) {\n      return <div>No data</div>\n    }\n    \n    const teamOneColor = teamPanel1Data.colors.primaryColor\n    const teamTwoColor = teamPanel2Data.colors.primaryColor\n    \n    return (\n      <XYPlot\n        yDomain={ [0, maxValue + 5] }\n        width={400} height={300}>\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis />\n        <YAxis />\n        <LineMarkSeries\n          className=\"linemark-series-example\" \n          style={{ strokeWidth: '3px' }}\n          lineStyle={{ stroke: teamOneColor }}\n          markStyle={{ stroke: teamOneColor, fill: teamOneColor }}\n          data={ dataTeamOne }\n        />\n        <LineMarkSeries\n          className=\"linemark-series-example\" \n          style={{ strokeWidth: '3px' }}\n          lineStyle={{ stroke: teamTwoColor }}\n          markStyle={{ stroke: teamTwoColor, fill: teamTwoColor }}\n          data={ dataTeamTwo }\n        />\n      </XYPlot>\n    )\n  }\n  \n  render() {\n    return (\n      <div className='comparison-stat-container'>\n          <h5>Takeaways</h5>\n          { this.shotsComparison() }\n      </div>\n    )\n  }\n}\n\nexport default TakeawayComparisonChart","import teams from '../constants/teams'\n\nexport const getTeamColors = (teamKey) => {\n  const colors = {\n    primaryColor: '#000',\n    secondaryColor: '#000',\n    tertiaryColor: '#000',\n    fourthColor: '#000'\n  }\n\n  if (teamKey) {\n    colors.primaryColor = teams[teamKey].primaryColor\n    colors.secondaryColor = teams[teamKey].secondaryColor || '#000'\n    colors.tertiaryColor = teams[teamKey].thirdColor || '#000'\n  }\n\n  return colors\n}","import moment from 'moment'\nconst axios = require('axios')\n\nexport const fetchTeamStats = async (teamId) => {\n  const response = await axios.get(`https://statsapi.web.nhl.com/api/v1/teams/${teamId}?expand=team.stats`)\n  return response.data.teams[0].teamStats[0].splits\n}\n\nexport const fetchPreviousFiveGames = async (teamId) => {\n  const endDate = moment().subtract(1, 'days').format('YYYY-MM-DD')\n  const startDate = moment().subtract(1, 'months').format('YYYY-MM-DD')\n  const previousGamesUrl = `https://statsapi.web.nhl.com/api/v1/schedule?teamId=${teamId}&startDate=${startDate}&endDate=${endDate}`\n  const schedule  = await axios.get(previousGamesUrl)\n  const lastFiveGameIds = schedule.data.dates.slice(-5).map(game => game.games[0].gamePk)\n  const gameDataPromises = lastFiveGameIds.map(gameId => axios.get(`https://statsapi.web.nhl.com/api/v1/game/${gameId}/boxscore`))\n  const lastFiveGames = await Promise.all(gameDataPromises)\n  return lastFiveGames.map(gameData => {\n    const teams = gameData.data.teams\n    if (teams.away.team.id === teamId) {\n      return teams.away.teamStats.teamSkaterStats\n    }\n    return teams.home.teamStats.teamSkaterStats\n  })\n}","import React, { Component } from 'react'\nimport './App.css'\nimport TeamPanel from './teamPanel'\nimport ShotComparisonChart from './charts/lineComparisonChart'\nimport HitComparisonChart from './charts/hitComparisonChart'\nimport TakeawayComparisonChart from './charts/takeawayComparisonChart'\nimport teams from './constants/teams'\nimport { getTeamColors } from './utils/colorUtil'\nimport { fetchPreviousFiveGames } from './utils/apiUtil'\n\nconst axios = require('axios')\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      teamPanel1Data: {},\n      teamPanel2Data: {}\n    }\n  }\n\n  selectTeam = async (teamKey, panelNumber) => {\n    try {\n      const teamId = teams[teamKey].id\n      const response = await axios.get(`https://statsapi.web.nhl.com/api/v1/teams/${teamId}?expand=team.stats`)\n      const stats = response.data.teams[0].teamStats[0].splits\n      const lastFive = await fetchPreviousFiveGames(teamId)\n      this.setState({\n        [`teamPanel${panelNumber}Data`]: {\n          selectedTeam: teamKey,\n          colors: getTeamColors(teamKey),\n          teamStats: {\n            stats: stats[0],\n            rankings: stats[1]\n          },\n          lastFive\n        } \n      })\n    } catch (error) {\n      this.setState({\n        [`teamPanel${panelNumber}Data`]: {\n          selectedTeam: null,\n          colors: {},\n          teamStats: null,\n          lastFive: []\n        } \n      })\n    }\n  }\n\n  render() {\n    const { teamPanel1Data, teamPanel2Data } = this.state\n    const backgroundImagePath = 'https://samirjoshi.github.io/hockey-dashboard/background2.jpg'\n\n    return (\n      <div>\n        <div className=\"App\"style={{\n          marginBottom: 0,\n          backgroundImage: `url(${backgroundImagePath})`,\n          backgroundSize: 'cover'\n        }} >\n          { !(teamPanel1Data.selectedTeam || teamPanel2Data.selectedTeam) &&\n            <div className='welcome-header-container'>\n              <div className='welcome-header'>\n                <h1>HOCKEY DASHBOARDS</h1>\n                <p>Choose two teams to see how they compare. Show that your team is going to win!</p>\n              </div>\n            </div>\n          }\n          <div className='team-comparison'>\n            <TeamPanel\n              panel={ 1 }\n              selectTeam={ this.selectTeam }\n              selectedTeam={ teamPanel1Data.selectedTeam }\n              colors={ teamPanel1Data.colors }\n              lastFive={ teamPanel1Data.lastFive }\n              teamStats={ teamPanel1Data.teamStats }/>\n            <TeamPanel\n              panel={ 2 }\n              selectTeam={ this.selectTeam }\n              selectedTeam={ teamPanel2Data.selectedTeam }\n              colors={ teamPanel2Data.colors }\n              lastFive={ teamPanel2Data.lastFive }\n              teamStats={ teamPanel2Data.teamStats }/>\n          </div>\n          { !!(teamPanel1Data.selectedTeam && teamPanel2Data.selectedTeam) &&\n            <div className='charts-and-trends-container'>\n              <ShotComparisonChart\n                teamPanel1Data={ teamPanel1Data }\n                teamPanel2Data={ teamPanel2Data } />\n              <HitComparisonChart\n                teamPanel1Data={ teamPanel1Data }\n                teamPanel2Data={ teamPanel2Data } />\n              <TakeawayComparisonChart\n                teamPanel1Data={ teamPanel1Data }\n                teamPanel2Data={ teamPanel2Data } />\n            </div>\n          }\n        </div>  \n        <div className='credits-and-info-container'>\n          Credits to the NHL and their stats API for the data used to construct the dashboards. Made with <span>🦈</span> by it me sj.\n        </div>  \n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '../node_modules/react-vis/dist/style.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}